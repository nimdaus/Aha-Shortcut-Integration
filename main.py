import requests
import os
from requests.exceptions import HTTPError
from requests.adapters import HTTPAdapter
from urllib3 import Retry
from os.path import join, dirname
from dotenv import load_dotenv
from time import sleep
import dateutil.parser
# from datetime import datetime
import pprint
import traceback

dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

'''AHA CONFIGURATION'''
# ========================================================================
aha_APIversion = os.environ["AHA_API_VERSION"]
aha_APIkey = os.environ["AHA_API_KEY"]
aha_label_filter = os.getenv('AHA_LABEL_FILTER', "product_epic")
# ========================================================================
aha_headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {aha_APIkey}",
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
    }
aha_endpoint = "https://company.aha.io/api"
aha_url = f"{aha_endpoint}/{aha_APIversion}/"
'''END AHA CONFIGURATION'''

'''SHORTCUT CONFIGURATION'''
# ========================================================================
shortcut_APIversion = os.environ["SHORTCUT_API_VERSION"]
shortcut_APIkey = os.environ["SHORTCUT_API_KEY"]
shortcut_label_filter = os.environ["SHORTCUT_LABEL_FILTER"]
# ========================================================================
shortcut_headers = {
    "Content-Type": "application/json",
    "Shortcut-Token": f"{shortcut_APIkey}",
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'
    }
shortcut_endpoint = "https://api.app.shortcut.com/api"
shortcut_url = f"{shortcut_endpoint}/{shortcut_APIversion}/"
'''END SHORTCUT CONFIGURATION'''

retry_strategy = Retry(
    total=3,
    status_forcelist=[429, 500, 502, 503, 504],
    allowed_methods=["GET", "PUT"],
    backoff_factor=os.getenv('BACKOFF', 15)
)
Retry.BACKOFF_MAX = os.getenv('BACKOFF_MAX', 60)
adapter = HTTPAdapter(max_retries=retry_strategy)
http = requests.Session()
http.mount("https://", adapter)

def get_aha_api(extension, element):
    get_route = aha_url + extension + "?per_page=100"
    aha_request = http.get(get_route, headers=aha_headers).json()
    aha_data = aha_request[element]
    if 'pagination' in aha_request:
        for page in range(2, aha_request['pagination']['total_pages'] + 1):
            aha_request = http.get(get_route + f"&page={page}", headers=aha_headers).json()
            aha_data.extend(aha_request[element])
        return aha_data
    else:
        return aha_data

# Fetch or Create Shortcut Label
shortcut_labels = http.get(shortcut_url + "labels", headers=shortcut_headers).json()
shortcut_product_label = None
for shortcut_label in shortcut_labels:
    if shortcut_label['name'] == shortcut_label_filter:
        shortcut_product_label = http.get(shortcut_url + "labels" + "/" + f"{shortcut_label['id']}", headers=shortcut_headers).json()
    else:
        continue
if shortcut_product_label is None:
    shortcut_label_create = http.post(
        shortcut_url + "labels",
        headers=shortcut_headers,
        json={"name":shortcut_label_filter, "description":"Autogenerated as part of AHA integration", "color":os.environ["SHORTCUT_LABEL_COLOR"]} 
    )
    shortcut_product_label = shortcut_label_create.json()

# Fetch Shortcut Epic Workflow
shortcut_epic_workflows = http.get(shortcut_url + "epic-workflow", headers=shortcut_headers).json()
for shortcut_epic_workflow_state in shortcut_epic_workflows['epic_states']:
    if shortcut_epic_workflow_state['name'] == os.getenv('SHORTCUT_EPIC_STATE_NAME_TODO', "to do"):
        shortcut_epic_to_do = shortcut_epic_workflow_state['id']
    elif shortcut_epic_workflow_state['name'] == os.getenv('SHORTCUT_EPIC_STATE_NAME_IN_PROGRESS', "in progress"):
        shortcut_epic_in_progress = shortcut_epic_workflow_state['id']
    elif shortcut_epic_workflow_state['name'] == os.getenv('SHORTCUT_EPIC_STATE_NAME_DONE', "done"):
        shortcut_epic_done = shortcut_epic_workflow_state['id']
    else:
        continue

# Fetch Shortcut Story Workflow
shortcut_story_workflows = http.get(shortcut_url + "workflows", headers=shortcut_headers).json()
for shortcut_story_workflow in shortcut_story_workflows:
    if shortcut_story_workflow['name'] == os.getenv('SHORTCUT_STORY_WORKFLOW', "Product Development"):  
        for shortcut_story_state in shortcut_story_workflow['states']:

            if shortcut_story_state['name'] == os.getenv('SHORTCUT_TORY_STATE_NAME_UNSCHEDULED', "Unscheduled"):
                shortcut_story_unscheduled = shortcut_story_state['id']

            elif shortcut_story_state['name'] == os.getenv('SHORTCUT_STORY_STATE_NAME_READY_FOR_DEVELOPMENT', "Ready for Development"):
                shortcut_story_ready_for_development = shortcut_story_state['id']

            elif shortcut_story_state['name'] == os.getenv('SHORTCUT_STORY_STATE_NAME_IN_DEVELOPMENT', "In Development"):
                shortcut_story_in_development = shortcut_story_state['id']

            elif shortcut_story_state['name'] == os.getenv('SHORTCUT_STORY_STATE_NAME_READY_FOR_REVIEW', "Ready for Review"):
                shortcut_story_ready_for_review = shortcut_story_state['id']

            elif shortcut_story_state['name'] == os.getenv('SHORTCUT_STORY_STATE_NAME_READY_FOR_DEPLOY', "Ready for Deploy"):
                shortcut_story_ready_for_deploy = shortcut_story_state['id']

            elif shortcut_story_state['name'] == os.getenv('SHORTCUT_STORY_STATE_NAME_COMPLETED', "Completed"):
                shortcut_story_completed = shortcut_story_state['id']
    else:
        continue

# Fetch AHA Workflow
aha_products = get_aha_api(extension="products", element="products")
for aha_product in aha_products:
    aha_workflows = get_aha_api(extension="products" + "/" + f"{aha_product['id']}" + "/" + "workflows", element="workflows")

    for aha_workflow in aha_workflows:
        if aha_workflow['name'] == os.getenv('AHA_FEATURE_WORKFLOW_NAME', "Product feature workflow"):  
            for aha_state in aha_workflow['workflow_statuses']:
                if aha_state['name'] == os.getenv('AHA_FEATURE_UNDER_CONSIDERATION', "Under consideration"):
                    aha_feature_under_consideration = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_FEATURE_IN_DESIGN', "In design"):
                    aha_feature_in_design = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_FEATURE_READY_TO_DEVELOP', "Ready to develop"):
                    aha_feature_ready_to_develop = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_FEATURE_IN_DEVELOPMENT', "In development"):
                    aha_feature_in_development = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_FEATURE_READY_TO_SHIP', "Ready to ship"):
                    aha_feature_ready_to_ship = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_FEATURE_SHIPPED', "Shipped"):
                    aha_feature_shipped = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_FEATURE_WILL_NOT_IMPLEMENT', "Will not implement"):
                    aha_feature_never = aha_state['id']
        if aha_workflow['name'] == os.getenv('AHA_RELEASE_WORKFLOW_NAME', "Product release workflow"):  
            for aha_state in aha_workflow['workflow_statuses']:
                if aha_state['name'] == os.getenv('AHA_RELEASE_UNDER_CONSIDERATION', "Under consideration"):
                    aha_release_under_consideration = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_RELEASE_SCHEDULED', "Scheduled"):
                    aha_release_scheduled = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_RELEASE__IN_DEVELOPMENT', "In development"):
                    aha_release_in_development = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_RELEASE__READY_TO_SHIP', "Ready to ship"):
                    aha_release_ready_to_ship = aha_state['id']
                elif aha_state['name'] == os.getenv('AHA_RELEASE__SHIPPED', "Shipped"):
                    aha_release_shipped = aha_state['id']
        else:
            continue

def resolve_epics(aha_release, shortcut_milestone):
    aha_release_epics = get_aha_api(extension="releases" + "/" + f"{aha_release['id']}" + "/" + "epics", element="epics")
    
    unfiltered_shortcut_epics = http.get(shortcut_url + "epics", headers=shortcut_headers).json()
    shortcut_epics = []
    for shortcut_epic in unfiltered_shortcut_epics:
        if shortcut_epic['milestone_id'] == shortcut_milestone['id']:
            shortcut_epics.append(shortcut_epic)

    aha_epic_shipped_count = 0
    for aha_epic_count, aha_release_epic in enumerate(aha_release_epics):
        aha_epic = get_aha_api(extension="epics" + "/" + f"{aha_release_epic['id']}", element="epic")
        
        if aha_epic['workflow_status']['id'] == aha_feature_shipped:
            aha_epic_shipped_count += 1
        
        if aha_epic_shipped_count == len(aha_release_epics): #SHIPPED IS NOT ENUMERATED
            aha_product_release_update = http.put(
                aha_url + "products" + "/" + f"{aha_product['id']}" + "/" + "releases" + "/" + f"{aha_release['id']}",
                headers=aha_headers,
                json={"release":{"workflow_status":{"id":aha_release_shipped}}}
            )
            # print(aha_product_release_update.status_code)
            # print(aha_product_release_update.text)

        shortcut_epic_dedupe = []
        match = False
        creation = False
        for shortcut_epic_count, shortcut_epic in enumerate(shortcut_epics):

            if shortcut_epic['name'] in shortcut_epic_dedupe:
                continue

            ### Link Epic
            if shortcut_epic['name'].strip().lower() == aha_epic['name'].strip().lower():
                match = True

                aha_epic_update = http.put(
                    aha_url + "epics" + "/" + f"{aha_epic['id']}",
                    headers=aha_headers,
                    json={"epic":{"custom_fields":{"link":f"{shortcut_epic['app_url']}"},"progress_source":"progress_from_features"}}
                )
                # print(aha_epic_update.status_code)
                # print(aha_epic_update.text)

                shortcut_product_label_dict = {'name': shortcut_product_label['name']}
                new_shortcut_epic_label_list = [shortcut_product_label_dict]

                for label in shortcut_epic['labels']:
                    if label['name'] != shortcut_product_label['name']:
                        new_shortcut_epic_label_list.append({'name': label['name']})
                
                shortcut_epic_update = http.put(
                    shortcut_url + "epics" + "/" + f"{shortcut_epic['id']}",
                    headers=shortcut_headers,
                    json={"labels":new_shortcut_epic_label_list}
                )

                ### Force Update Epic
                for aha_custom_field2 in aha_release['custom_fields']:
                    if aha_custom_field2['value'] is None:
                        continue
                    if aha_custom_field2['key'].strip().lower() == "force_update" and aha_custom_field2['value'].strip().lower() == "yes":

                        if shortcut_epic["started_at"] is not None:
                            shortcut_epic_start_date_datetime = dateutil.parser.isoparse(shortcut_epic["started_at"])
                            shortcut_epic_start_date_string_time_aha = shortcut_epic_start_date_datetime.strftime('%Y-%m-%d')
                            aha_epic_update = http.put(
                                aha_url + "epics" + "/" + f"{aha_epic['id']}",
                                headers=aha_headers,
                                json={"epic":{"start_date":shortcut_epic_start_date_string_time_aha, "custom_fields":{"link":f"{shortcut_epic['app_url']}"},"progress_source":"progress_from_features", "labels":new_shortcut_epic_label_list}}
                            )
                            # print(aha_epic_update.status_code)
                            # print(aha_epic_update.text)

                            if shortcut_epic["deadline"] is not None:
                                shortcut_epic_deadline_datetime = dateutil.parser.isoparse(shortcut_epic["deadline"])
                                shortcut_epic_deadline_string_time_aha = shortcut_epic_deadline_datetime.strftime('%Y-%m-%d')
                                aha_epic_update = http.put(
                                    aha_url + "epics" + "/" + f"{aha_epic['id']}",
                                    headers=aha_headers,
                                    json={"epic":{"start_date":shortcut_epic_start_date_string_time_aha, "custom_fields":{"link":f"{shortcut_epic['app_url']}"},"progress_source":"progress_from_features", "labels":new_shortcut_epic_label_list}}
                                )
                                # print(aha_epic_update.status_code)
                                # print(aha_epic_update.text)

                        else:
                            shortcut_epic_update = http.put(
                                shortcut_url + "epics" + "/" + f"{shortcut_epic['id']}",
                                headers=shortcut_headers,
                                json={"description":aha_epic['description']['body'], "labels":new_shortcut_epic_label_list}
                            )
                            # print(shortcut_epic_update.status_code)
                            # print(shortcut_epic_update.text)

                print(f"Epic Found: {aha_epic['url']} - {aha_epic['name']} [A:{aha_epic_count}/{len(aha_release_epics)-1} | S:{shortcut_epic_count}/{len(shortcut_epics)-1}]") #TESTING
                shortcut_epic_dedupe.append(aha_epic['name'])
                resolve_feature_story(aha_release, aha_epic, shortcut_epic)
                continue

            ### Create Epic
            if shortcut_epic_count == len(shortcut_epics)-1:
                if match == True:
                    continue
                for aha_custom_field2 in aha_epic['custom_fields']:
                    if aha_custom_field2['key'] == "link" and aha_custom_field2['value'] is not None:
                        continue
                    if aha_custom_field2['value'] is None:
                        continue
                    if aha_custom_field2['key'].strip().lower() == "force_update" and aha_custom_field2['value'].strip().lower() == "yes":
                        creation = True
                        shortcut_product_label_dict = {'name': shortcut_product_label['name']}
                        new_shortcut_epic_label_list = [shortcut_product_label_dict]

                        for label in shortcut_epic['labels']:
                            if label['name'] != shortcut_product_label['name']:
                                new_shortcut_epic_label_list.append({'name': label['name']})
                                
                        shortcut_epic_create = http.post(
                            shortcut_url + "epics",
                            headers=shortcut_headers,
                            json={"name":aha_epic['name'], "description":aha_epic['description']['body'], "labels":new_shortcut_epic_label_list, "epic_state_id":shortcut_epic_to_do, "milestone_id":shortcut_milestone['id']}
                        )
                        shortcut_epic_create_json = shortcut_epic_create.json()
                        # print(shortcut_epic_create.status_code)
                        # print(shortcut_epic_create.text)

                        aha_epic_update = http.put(
                            aha_url + "epics" + "/" + f"{aha_epic['id']}",
                            headers=aha_headers,
                            json={"epic":{"custom_fields":{"link":f"{shortcut_epic_create_json['app_url']}"},"progress_source":"progress_from_features"}}
                        )
                        # print(aha_epic_update.status_code)
                        # print(aha_epic_update.text)
                if creation == True:
                    shortcut_epic_dedupe.append(aha_epic['name'])
                    print("+++")
                    print(f"Creating Epic: {aha_epic['name']} [A:{aha_epic_count}/{len(aha_release_epics)-1} | S:{shortcut_epic_count}/{len(shortcut_epics)-1}]") #TESTING
                    print("+++")
                continue
                
        print("Completed Epic/Feature Lookup")
        print("")
        continue
    return

def resolve_feature_story(aha_release, aha_epic, shortcut_epic):
    aha_epic_features = get_aha_api(extension="epics" + "/" + f"{aha_epic['id']}" + "/" + "features", element="features")
    shortcut_epic_stories = http.get(shortcut_url + "epics" + "/" + f"{shortcut_epic['id']}" + "/" + "stories", headers=shortcut_headers).json()

    aha_feature_shipped_count = 0
    for aha_feature_count, aha_epic_feature in enumerate(aha_epic_features):
        aha_feature = get_aha_api(extension="features" + "/" + f"{aha_epic_feature['id']}", element="feature")
        
        shortcut_story_dedupe = []
        match = False
        creation = False
        for shortcut_story_count, shortcut_story in enumerate(shortcut_epic_stories):

            if shortcut_story['name'] in shortcut_story_dedupe:
                continue
            
            ### Link Story
            if shortcut_story['name'].strip().lower() == aha_feature['name'].strip().lower():
                match = True

                aha_feature_update = http.put(
                    aha_url + "features" + "/" + f"{aha_feature['id']}",
                    headers=aha_headers,
                    json={"feature":{"custom_fields":{"link":f"{shortcut_story['app_url']}"}}}
                )
                # print(aha_feature_update.status_code)
                # print(aha_feature_update.text)

                shortcut_story_external_link_array = [aha_feature['url']]
                for external_link in shortcut_story['external_links']:
                    if external_link != aha_feature['url']:
                        shortcut_story_external_link_array.append(external_link)
                
                shortcut_product_label_dict = {'name': shortcut_product_label['name']}
                new_shortcut_story_label_list = [shortcut_product_label_dict]
                for label in shortcut_story['labels']:
                    if label['name'] != shortcut_product_label['name']:
                        new_shortcut_story_label_list.append({'name': label['name']})
                
                shortcut_story_update = http.put(
                    shortcut_url + "stories" + "/" + f"{shortcut_story['id']}",
                    headers=shortcut_headers,
                    json={"labels":new_shortcut_story_label_list, "external_links":shortcut_story_external_link_array}
                )
                # print(shortcut_story_update.status_code)
                # print(shortcut_story_update.text)

                new_aha_story_workflow_status = None
                new_aha_story_progress = None
                new_aha_epic_workflow_status = None
                new_aha_release_workflow_status = None

                #Force Update Story
                for aha_custom_field2 in aha_feature['custom_fields']:
                    if aha_custom_field2['value'] is None:
                        continue
                    if aha_custom_field2['key'].strip().lower() == "force_update" and aha_custom_field2['value'].strip().lower() == "yes":

                        for aha_feature_requirement in aha_feature['requirements']:
                            for shortcut_story_task_count, shortcut_story_task in enumerate(shortcut_story['tasks']):
                                if aha_feature_requirement['name'].strip().lower() == shortcut_story_task['description'].strip().lower():
                                    continue
                                
                                if shortcut_story_task_count == len(shortcut_story['tasks'])-1:
                                    shortcut_story_update = http.put(
                                        shortcut_url + "stories" + "/" + f"{shortcut_story['id']}" + "/" + "tasks",
                                        headers=shortcut_headers,
                                        json={"description":aha_feature_requirement['body']}
                                    )
                                    # print(shortcut_story_update.status_code)
                                    # print(shortcut_story_update.text)
                                    

                        if shortcut_story['workflow_state_id'] == shortcut_story_completed:
                            new_aha_story_workflow_status = aha_feature_shipped
                            aha_feature_shipped_count += 1
                            new_aha_story_progress = int(100)
                            if aha_feature_shipped_count == aha_epic_features:
                                new_aha_epic_workflow_status = aha_feature_shipped

                        if shortcut_story['workflow_state_id'] == shortcut_story_unscheduled:
                            new_aha_story_workflow_status = aha_feature_under_consideration
                            new_aha_story_progress = int(0)

                        if shortcut_story['workflow_state_id'] == shortcut_story_ready_for_development:
                            new_aha_story_workflow_status = aha_feature_ready_to_develop
                            new_aha_story_progress = int(0)
                            if aha_epic['workflow_status']['id'] != aha_feature_ready_to_develop or aha_feature_in_development or aha_feature_ready_to_ship or aha_feature_shipped:
                                new_aha_epic_workflow_status = aha_feature_ready_to_develop
                            if aha_release['workflow_status']['id'] != aha_release_scheduled or aha_release_in_development or aha_release_ready_to_ship or aha_release_shipped:
                                new_aha_release_workflow_status = aha_release_scheduled

                        if shortcut_story['workflow_state_id'] == shortcut_story_in_development:
                            new_aha_story_workflow_status = aha_feature_in_development
                            new_aha_story_progress = int(25)
                            if aha_epic['workflow_status']['id'] != aha_feature_in_development or aha_feature_ready_to_ship or aha_feature_shipped:
                                new_aha_epic_workflow_status = aha_feature_in_development
                            if aha_release['workflow_status']['id'] != aha_release_in_development or aha_release_ready_to_ship or aha_release_shipped:
                                new_aha_release_workflow_status = aha_release_in_development

                        if shortcut_story['workflow_state_id'] == shortcut_story_ready_for_review:
                            new_aha_story_workflow_status = aha_feature_in_development
                            new_aha_story_progress = int(50)
                            if aha_epic['workflow_status']['id'] != aha_feature_in_development or aha_feature_ready_to_ship or aha_feature_shipped:
                                new_aha_epic_workflow_status = aha_feature_in_development
                            if aha_release['workflow_status']['id'] != aha_release_in_development or aha_release_ready_to_ship or aha_release_shipped:
                                new_aha_release_workflow_status = aha_release_in_development
                        
                        if shortcut_story['workflow_state_id'] == shortcut_story_ready_for_deploy:
                            new_aha_story_workflow_status = aha_feature_ready_to_ship
                            new_aha_story_progress = int(75)
                            if aha_epic['workflow_status']['id'] != aha_feature_in_development or aha_feature_ready_to_ship or aha_feature_shipped:
                                new_aha_epic_workflow_status = aha_feature_ready_to_ship
                            if aha_release['workflow_status']['id'] != aha_release_in_development or aha_release_ready_to_ship or aha_release_shipped:
                                new_aha_release_workflow_status = aha_release_ready_to_ship

                        if new_aha_story_workflow_status is None:
                            new_aha_story_workflow_status = aha_feature['workflow_status']['id']
                        if new_aha_story_progress is None:
                            new_aha_story_progress = aha_feature['progress']

                        if shortcut_story["started_at"] is not None:
                            shortcut_story_start_date_datetime = dateutil.parser.isoparse(shortcut_story["started_at"])
                            shortcut_story_start_date_string_time_aha = shortcut_story_start_date_datetime.strftime('%Y-%m-%d')
                            aha_feature_update = http.put(
                                aha_url + "features" + "/" + f"{aha_feature['id']}",
                                headers=aha_headers,
                                json={"feature":{"start_date":shortcut_story_start_date_string_time_aha, "progress": new_aha_story_progress, "custom_fields":{"link":f"{shortcut_story['app_url']}"}, "workflow_status":{"id":new_aha_story_workflow_status}}}
                            )
                            # print(aha_feature_update.status_code)
                            # print(aha_feature_update.text)

                            if shortcut_story["deadline"] is not None:
                                shortcut_story_deadline_datetime = dateutil.parser.isoparse(shortcut_story["deadline"])
                                shortcut_story_deadline_string_time_aha = shortcut_story_deadline_datetime.strftime('%Y-%m-%d')
                                aha_feature_update = http.put(
                                    aha_url + "features" + "/" + f"{aha_feature['id']}",
                                    headers=aha_headers,
                                    json={"feature":{"start_date":shortcut_story_start_date_string_time_aha, "progress": new_aha_story_progress, "custom_fields":{"link":f"{shortcut_story['app_url']}"}, "workflow_status":{"id":new_aha_story_workflow_status}}}
                                )
                                # print(aha_feature_update.status_code)
                                # print(aha_feature_update.text)
                        else:
                            aha_feature_update = http.put(
                                aha_url + "features" + "/" + f"{aha_feature['id']}",
                                headers=aha_headers,
                                json={"feature":{"progress": new_aha_story_progress, "custom_fields":{"link":f"{shortcut_story['app_url']}"}, "workflow_status":{"id":new_aha_story_workflow_status}}}
                            )
                            # print(aha_feature_update.status_code)
                            # print(aha_feature_update.text)
                        
                        if new_aha_epic_workflow_status is not None:
                            aha_epic_update = http.put(
                                    aha_url + "epics" + "/" + f"{aha_epic['id']}",
                                    headers=aha_headers,
                                    json={"workflow_status":{"id":new_aha_epic_workflow_status}}
                                )
                            # print(aha_epic_update.status_code)
                            # print(aha_epic_update.text)

                        if new_aha_release_workflow_status is not None:
                            aha_product_release_update = http.put(
                                    aha_url + "products" + "/" + f"{aha_product['id']}" + "/" + "releases" + "/" + f"{aha_release['id']}",
                                    headers=aha_headers,
                                    json={"release":{"workflow_status":{"id":new_aha_release_workflow_status}}}
                                )
                            # print(aha_product_release_update.status_code)
                            # print(aha_product_release_update.text)

                print(f"Story Found: {aha_feature['url']} - {aha_feature['name']} [A:{aha_feature_count}/{len(aha_epic_features)-1} | S:{shortcut_story_count}/{len(shortcut_epic_stories)-1}]") #TESTING
                shortcut_story_dedupe.append(aha_feature['name'])
                continue
                
            ### Create Story
            if shortcut_story_count == len(shortcut_epic_stories)-1:
                if match == True:
                    continue
                for aha_custom_field2 in aha_feature['custom_fields']:
                    if aha_custom_field2['value'] is None:
                        continue
                    if shortcut_story['name'] in shortcut_story_dedupe:
                        continue
                    if aha_custom_field2['key'].strip().lower() == "force_update" and aha_custom_field2['value'].strip().lower() == "yes":
                        creation = True
                        shortcut_story_update = http.post(
                            shortcut_url + "stories",
                            headers=shortcut_headers,
                            json={"name":aha_feature['name'], "description":aha_feature['description']['body'], "workflow_state_id":shortcut_story_unscheduled, "epic_id":shortcut_epic['id'], "external_links":[aha_feature['url']]}
                        )
                        # print(shortcut_story_update.status_code)
                        # print(shortcut_story_update.text)

                        shortcut_story_update_json = shortcut_story_update.json()
                        aha_feature_update = http.put(
                            aha_url + "features" + "/" + f"{aha_feature['id']}",
                            headers=aha_headers,
                            json={"feature":{"custom_fields":{"link":f"{shortcut_story_update_json['app_url']}"}}}
                        )
                        # print(aha_feature_update.status_code)
                        # print(aha_feature_update.text)

                if creation == True:
                    shortcut_story_dedupe.append(aha_feature['name'])
                    print("+++")
                    print(f"Creating Story: {aha_feature['name']} [A:{aha_feature_count}/{len(aha_epic_features)-1} | S:{shortcut_story_count}/{len(shortcut_epic_stories)-1}]") #TESTING
                    print("+++")
                continue
    return

def update_labeled_in_shortcut():
    unfiltered_shortcut_epics = http.get(shortcut_url + "epics", headers=shortcut_headers).json()
    shortcut_product_epics = []
    for shortcut_epic in unfiltered_shortcut_epics:
        for label in shortcut_epic['labels']:
            if label['name'] == shortcut_label_filter:
                shortcut_product_epics.append(shortcut_epic)

    if shortcut_product_epics is not None:
        for shortcut_product_epic in shortcut_product_epics:
            shortcut_product_epic_stories = http.get(shortcut_url + "epics" + "/" + f"{shortcut_product_epic['id']}" + "/" + "stories", headers=shortcut_headers).json()

            shortcut_product_story_completed_count = 0      
            for shortcut_product_story_count, shortcut_product_story in enumerate(shortcut_product_epic_stories):
                shortcut_product_story_data = http.get(shortcut_url + "stories" + "/" + f"{shortcut_product_story['id']}", headers=shortcut_headers).json()

                if shortcut_product_story_data['workflow_state_id'] != shortcut_story_completed:

                    shortcut_engineering_story_completed_count = 0
                    for shortcut_engineering_story_count, shortcut_engineering_story in enumerate(shortcut_product_story_data['story_links']):

                        if shortcut_engineering_story['subject_workflow_state_id'] == shortcut_story_unscheduled:
                            continue

                        if shortcut_engineering_story['subject_workflow_state_id'] == shortcut_story_in_development or shortcut_story_ready_for_review or shortcut_story_ready_for_deploy:
                            
                            shortcut_product_story_update = http.put(
                                shortcut_url + "stories" + "/" + f"{shortcut_product_story['id']}",
                                headers=shortcut_headers,
                                json={"workflow_state_id":shortcut_story_in_development}
                            )

                            if shortcut_product_epic['epic_state_id'] != shortcut_epic_in_progress:
                                shortcut_product_epic_update = http.put(
                                    shortcut_url + "epics" + "/" + f"{shortcut_product_epic['id']}",
                                    headers=shortcut_headers,
                                    json={"epic_state_id":shortcut_epic_in_progress}
                                )

                        if shortcut_engineering_story['subject_workflow_state_id'] == shortcut_story_completed:
                            shortcut_engineering_story_completed_count += 1
                            shortcut_product_story_update = http.put(
                                shortcut_url + "stories" + "/" + f"{shortcut_product_story['id']}",
                                headers=shortcut_headers,
                                json={"workflow_state_id":shortcut_story_in_development}
                            )

                            if shortcut_product_epic['epic_state_id'] != shortcut_epic_in_progress:
                                shortcut_product_epic_update = http.put(
                                    shortcut_url + "epics" + "/" + f"{shortcut_product_epic['id']}",
                                    headers=shortcut_headers,
                                    json={"epic_state_id":shortcut_epic_in_progress}
                                )
                            
                        if shortcut_engineering_story_completed_count == len(shortcut_product_story_data['story_links']):
                            shortcut_product_story_update = http.put(
                                shortcut_url + "stories" + "/" + f"{shortcut_product_story['id']}",
                                headers=shortcut_headers,
                                json={"workflow_state_id":shortcut_story_completed}
                            )

                            if shortcut_product_epic['epic_state_id'] != shortcut_epic_in_progress:
                                shortcut_product_epic_update = http.put(
                                    shortcut_url + "epics" + "/" + f"{shortcut_product_epic['id']}",
                                    headers=shortcut_headers,
                                    json={"epic_state_id":shortcut_epic_in_progress}
                                )

                else:
                    shortcut_product_story_completed_count += 1

                if shortcut_product_story_completed_count == len(shortcut_product_epic_stories):
                    shortcut_product_epic_update = http.put(
                        shortcut_url + "epics" + "/" + f"{shortcut_product_epic['id']}",
                        headers=shortcut_headers,
                        json={"epic_state_id":shortcut_epic_done}
                    )
                print(f"Product Story Updated: {shortcut_product_story_data['name']} [S:{shortcut_product_story_count}/{len(shortcut_product_epic_stories)-1}]")
    else:
        print("No Product Labeled Epics or Stories")                
    return

def main():
    while True:
        try:
            update_labeled_in_shortcut()

            aha_products = get_aha_api(extension="products", element="products")
            for aha_product in aha_products:
                aha_product_releases = get_aha_api(extension="products" + "/" + f"{aha_product['id']}" + "/" + "releases", element="releases")
                shortcut_milestones = http.get(shortcut_url + "milestones", headers=shortcut_headers).json()

                for aha_release_count, aha_product_release in enumerate(aha_product_releases):
                    aha_release = get_aha_api(extension="releases" + "/" + f"{aha_product_release['id']}", element="release")

                    if aha_release['workflow_status']['id'] == aha_release_shipped:
                        print(f"Completed Release found: {aha_release['url']} - {aha_release['name']} [A:{aha_release_count}/{len(aha_product_releases)-1}] == Skipping") # TESTING
                        print("")
                        continue

                    shortcut_milestone_dedupe = []
                    match = False
                    creation = False
                    for shortcut_milestone_count, shortcut_milestone in enumerate(shortcut_milestones):

                        if shortcut_milestone['name'] in shortcut_milestone_dedupe:
                            continue

                        ### Link Milestone
                        if shortcut_milestone['name'].strip().lower() == aha_release['name'].strip().lower():
                            match = True

                            aha_release_update = http.put(
                                aha_url + "products" + "/" + f"{aha_product['id']}" + "/" + "releases" + "/" + f"{aha_product_release['id']}",
                                headers=aha_headers,
                                json={"release":{"custom_fields":{"link":f"{shortcut_milestone['app_url']}"}, "initiatives":[],"progress_source":"progress_from_features"}}
                            )
                            # print(aha_release_update.status_code)
                            # print(aha_release_update.text)

                            new_aha_release_workflow_status = None     
                            ### Force Update Milestone
                            for aha_custom_field2 in aha_release['custom_fields']:
                                if aha_custom_field2['value'] is None:
                                    continue
                                if aha_custom_field2['key'].strip().lower() == "force_update" and aha_custom_field2['value'].strip().lower() == "yes":
                                    if int(aha_release['progress']) > int(0):
                                        new_aha_release_workflow_status = aha_release_in_development
                                        if int(aha_release['progress']) == int(100):
                                            new_aha_release_workflow_status = aha_release_shipped
                                    if int(aha_release['progress']) == 0:
                                        new_aha_release_workflow_status = aha_release_under_consideration

                                    if shortcut_milestone["started_at"] is not None:
                                        shortcut_milestone_start_date_datetime = dateutil.parser.isoparse(shortcut_milestone["started_at"])
                                        shortcut_milestone_start_date_string_time_aha = shortcut_milestone_start_date_datetime.strftime('%Y-%m-%d')
                                        aha_release_update = http.put(
                                            aha_url + "products" + "/" + f"{aha_product['id']}" + "/" + "releases" + "/" + f"{aha_product_release['id']}",
                                            headers=aha_headers,
                                            json={"release":{"start_date":shortcut_milestone_start_date_string_time_aha, "custom_fields":{"link":f"{shortcut_milestone['app_url']}"},"initiatives":[],"progress_source":"progress_from_features", "workflow_status":{"id":new_aha_release_workflow_status}}}
                                        )
                                        # print(aha_release_update.status_code)
                                        # print(aha_release_update.text)

                                        if shortcut_milestone["completed_at"] is not None:    
                                            shortcut_milestone_end_date_datetime = dateutil.parser.isoparse(shortcut_milestone["completed_at"])
                                            shortcut_milestone_end_date_string_time_aha = shortcut_milestone_end_date_datetime.strftime('%Y-%m-%d')
                                            aha_release_update = http.put(
                                                aha_url + "products" + "/" + f"{aha_product['id']}" + "/" + "releases" + "/" + f"{aha_product_release['id']}",
                                                headers=aha_headers,
                                                json={"release":{"start_date":shortcut_milestone_start_date_string_time_aha, "end_date":shortcut_milestone_end_date_string_time_aha, "custom_fields":{"link":f"{shortcut_milestone['app_url']}"},"initiatives":[],"progress_source":"progress_from_features", "workflow_status":{"id":new_aha_release_workflow_status}}}
                                            )
                                            # print(aha_release_update.status_code)
                                            # print(aha_release_update.text)
                                    else:
                                        aha_release_update = http.put(
                                            aha_url + "products" + "/" + f"{aha_product['id']}" + "/" + "releases" + "/" + f"{aha_product_release['id']}",
                                            headers=aha_headers,
                                            json={"release":{"custom_fields":{"link":f"{shortcut_milestone['app_url']}"},"initiatives":[],"progress_source":"progress_from_features", "workflow_status":{"id":new_aha_release_workflow_status}}}
                                        )
                                        # print(aha_release_update.status_code)
                                        # print(aha_release_update.text)

                                    shortcut_milestone_update = http.put(
                                                shortcut_url + "milestones" + "/" + f"{shortcut_milestone['id']}",
                                                headers=shortcut_headers,
                                                json={"description":aha_release['theme']['body']}
                                            )
                                    # print(shortcut_milestone_update.status_code)
                                    # print(shortcut_milestone_update.text)

                            print(f"Release Found: {aha_release['url']} - {aha_release['name']} [A:{aha_release_count}/{len(aha_product_releases)-1} | S:{shortcut_milestone_count}/{len(shortcut_milestones)-1}]") # TESTING
                            shortcut_milestone_dedupe.append(aha_release['name'])
                            print("### Attached Epics/Features")
                            resolve_epics(aha_release, shortcut_milestone)
                            print("")
                            print("")
                            continue

                        if shortcut_milestone_count == len(shortcut_milestones)-1:
                            if match == True:
                                continue
                            for aha_custom_field2 in aha_release['custom_fields']:
                                if aha_custom_field2['value'] is None:
                                    continue
                                if aha_release['name'] in shortcut_milestone_dedupe:
                                    continue
                                if aha_custom_field2['key'].strip().lower() == "force_update" and aha_custom_field2['value'].strip().lower() == "yes":
                                    creation = True
                                    shortcut_milestone_create = http.post(
                                        shortcut_url + "milestones",
                                        headers=shortcut_headers,
                                        json={"name":aha_release['name'], "description":aha_release['theme']['body'], "state":"to do"}
                                    )
                                    # print(shortcut_milestone_create.status_code)
                                    # print(shortcut_milestone_create.text)

                                    if shortcut_milestone_create.status_code == 403:
                                        print("Milestone creation rejected -- Check Shortcut Subscription")
                                        continue 
                                    shortcut_milestone_create_json = shortcut_milestone_create.json()
                                    aha_release_update = http.put(
                                        aha_url + "products" + "/" + f"{aha_product['id']}" + "/" + "releases" + "/" + f"{aha_product_release['id']}",
                                        headers=aha_headers,
                                        json={"release":{"custom_fields":{"link":f"{shortcut_milestone_create_json['app_url']}"},"initiatives":[],"progress_source":"progress_from_features"}}
                                    )
                                    # print(aha_release_update.status_code)
                                    # print(aha_release_update.text)           
                                                     
                            if creation == True:
                                shortcut_milestone_dedupe.append(aha_release['name'])
                                print("+++")
                                print(f"Creating Release: {aha_release['name']} [A:{aha_release_count}/{len(aha_product_releases)-1} | S:{shortcut_milestone_count}/{len(shortcut_milestones)-1}]") #TESTING
                                print("+++")
                            continue

        except HTTPError as http_err:
            print(f'HTTP error occurred: {http_err}')
            # continue
        except Exception as err:
            print(f'Other error occurred: {err}')
            print(traceback.format_exc())
            break
            # continue
        
        print("Sync Complete - Sleeping...")
        sleep(60) #API Cooldown to reduce 429s

if __name__ == '__main__':
    main()